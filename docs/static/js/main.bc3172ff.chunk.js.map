{"version":3,"sources":["assets/heroes/DC-logo.png","assets/heroes/marvel-logo.png","assets/heroes sync /^/.*$","assets/heroes/dc-arrow.jpg","assets/heroes/dc-batman.jpg","assets/heroes/dc-black.jpg","assets/heroes/dc-blue.jpg","assets/heroes/dc-flash.jpg","assets/heroes/dc-green.jpg","assets/heroes/dc-martian.jpg","assets/heroes/dc-robin.jpg","assets/heroes/dc-superman.jpg","assets/heroes/dc-wonder.jpg","assets/heroes/marvel-captain.jpg","assets/heroes/marvel-cyclops.jpg","assets/heroes/marvel-daredevil.jpg","assets/heroes/marvel-hawkeye.jpg","assets/heroes/marvel-hulk.jpg","assets/heroes/marvel-iron.jpg","assets/heroes/marvel-silver.jpg","assets/heroes/marvel-spider.jpg","assets/heroes/marvel-thor.jpg","assets/heroes/marvel-wolverine.jpg","auth/AuthContext.js","types/types.js","auth/authReducer.js","components/login/LoginScreen.js","data/heroes.js","helpers/heroImages.js","components/heroes/HeroCard.js","components/heroes/HeroesList.js","selectors/getHeroesByPublisher.js","components/marvel/MarvelScreen.js","components/ui/Navbar.js","components/dc/DcScreen.js","components/heroes/HeroeScreen.js","selectors/getHeroeById.js","components/search/SearchScreen.js","hooks/useForm.js","selectors/getHeroesByName.js","components/ui/Footer.js","routers/DashboardRoutes.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","HeroesApp.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","AuthContext","createContext","types","authReducer","state","action","name","logged","type","payload","LoginScreen","history","dispatch","useContext","obj","className","onClick","lastPathname","localStorage","getItem","replace","heroes","heroImages","require","HeroCard","superhero","publisher","alter_ego","first_appearance","characters","to","src","default","alt","HeroesList","heroesss","useMemo","includes","filter","hero","getHeroesByPublisher","MarvelScreen","marvel","Navbar","user","push","useHistory","style","marginLeft","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","activeClassName","exact","role","trigger","colors","stroke","width","height","aria-labelledby","color","DcScreen","dc","HeroeScreen","heroeId","useParams","find","length","goBack","SearchScreen","location","useLocation","queryString","parse","search","q","initialState","useState","values","setValues","target","value","useForm","searchText","handledInputChange","heroesFiltered","toLocaleLowerCase","heroName","getHeroesByName","onSubmit","preventDefault","placeholder","autoComplete","onChange","herOe","Footer","bottom","marginTop","backgroundColor","opacity","href","DashboardRoutes","path","component","PrivateRoute","isAuthenticated","Component","rest","setItem","pathname","props","PublicRoute","AppRouter","console","log","init","JSON","HeroesApp","useReducer","useEffect","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc3172ff.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/DC-logo.4527e8af.png\";","export default __webpack_public_path__ + \"static/media/marvel-logo.caf358d2.png\";","var map = {\n\t\"./DC-logo.png\": 17,\n\t\"./dc-arrow.jpg\": 34,\n\t\"./dc-batman.jpg\": 35,\n\t\"./dc-black.jpg\": 36,\n\t\"./dc-blue.jpg\": 37,\n\t\"./dc-flash.jpg\": 38,\n\t\"./dc-green.jpg\": 39,\n\t\"./dc-martian.jpg\": 40,\n\t\"./dc-robin.jpg\": 41,\n\t\"./dc-superman.jpg\": 42,\n\t\"./dc-wonder.jpg\": 43,\n\t\"./marvel-captain.jpg\": 44,\n\t\"./marvel-cyclops.jpg\": 45,\n\t\"./marvel-daredevil.jpg\": 46,\n\t\"./marvel-hawkeye.jpg\": 47,\n\t\"./marvel-hulk.jpg\": 48,\n\t\"./marvel-iron.jpg\": 49,\n\t\"./marvel-logo.png\": 18,\n\t\"./marvel-silver.jpg\": 50,\n\t\"./marvel-spider.jpg\": 51,\n\t\"./marvel-thor.jpg\": 52,\n\t\"./marvel-wolverine.jpg\": 53\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 33;","export default __webpack_public_path__ + \"static/media/dc-arrow.15b27bc2.jpg\";","export default __webpack_public_path__ + \"static/media/dc-batman.ab9eadc3.jpg\";","export default __webpack_public_path__ + \"static/media/dc-black.3747c663.jpg\";","export default __webpack_public_path__ + \"static/media/dc-blue.cc8169a3.jpg\";","export default __webpack_public_path__ + \"static/media/dc-flash.b3922f25.jpg\";","export default __webpack_public_path__ + \"static/media/dc-green.01c54ee1.jpg\";","export default __webpack_public_path__ + \"static/media/dc-martian.78565f7d.jpg\";","export default __webpack_public_path__ + \"static/media/dc-robin.ea4afe99.jpg\";","export default __webpack_public_path__ + \"static/media/dc-superman.e9391474.jpg\";","export default __webpack_public_path__ + \"static/media/dc-wonder.970ba2d6.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-captain.d2c7774d.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-cyclops.f1442408.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-daredevil.2f4f1a57.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-hawkeye.1f78e874.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-hulk.d1af5fe5.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-iron.b394df11.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-silver.1d43a08b.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-spider.054016b4.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-thor.c63e651c.jpg\";","export default __webpack_public_path__ + \"static/media/marvel-wolverine.ee676488.jpg\";","//Hacemos la importación de Context\r\nimport { createContext } from 'react';\r\n\r\n//Este es nuestro context. Lo utilizaremos en HeroesApp.js, se puede utilizar en el index.js pero es mejor dejar nuestro index.js lo más limpio posible, lo hacemos el HeroesApp porque ahí es donde ya comienza a desplegarse toda mi aplicación\r\nexport const AuthContext = createContext();\r\n\r\n\r\n","\r\n//Este objeto va a contener todos los types de mi aplicación sin importar cuantos sean\r\n//Este objeto lo utilizamos en auth\r\nexport const types = {\r\n    login: '[auth] login',\r\n    logout: '[auth] logout',\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n//Exportamos el reducer\r\nexport const authReducer = ( state = {}, action)=>{//El reducer recibe el state elcual es un objeto. La action es la accion que vamos a realizar\r\n\r\n    //Este será el estado si nuestro usuario está autenticado, y si no está autenticado no va a tener la propiedad \"name\" y el logged estará en \"false\"\r\n     state = {\r\n        name: 'Alejandro',\r\n        logged: true\r\n    }\r\n\r\n\r\n\r\nswitch ( action.type ) {//Evaluaremos el action.type\r\n    //Las dos acciones que vamos a realizar es el Login y el Logout\r\n    case types.login:\r\n        \r\n        return{\r\n            //Retornamos todo lo que viene en el action.payload (...action.payload)\r\n            ...action.payload, //Tomamos lo que viene en el payload de la accion y se establece abajo el logged en true, esto es porque si enviamos un name:'Alejandro' este va a ser el payload de la de accion y si recibe dicha propiedad entonces el logged cambia a true por el contrario, si no enviamos el name:'Alejandro' solo se establece la propiedad logged en false(en este caso es logout)\r\n            logged: true //La autenticación del usuario. Si pasa la autenticación va a ser tru\r\n        }\r\n    \r\n    case types.logout:\r\n\r\n    return { //En el logout no nos interesará nada del payload, solo retornaremos el estamos de la propiedad logged en \"false\"\r\n        logged: false\r\n    }\r\n        \r\n    default:\r\n        return state; //Retornamos el estado tal y como se encuentra originalmente\r\n}\r\n\r\n}","import React, { useContext } from 'react'\r\nimport { AuthContext } from '../../auth/AuthContext';\r\nimport { types } from '../../types/types';\r\n\r\nexport const LoginScreen = ({ history }) => { //Este history es una de las propiedades del sistema de rutas LoginScreen, se pueden ver esas propiedades en la pestaña componentes de nuestro navegador web y seleccionamos LoginScreen, para tener acceso a esas propiedades simplemente las extraemos desde los argumentos de LoginScreen utilizando el mismo nombre de la propiedad a utilizar\r\n\r\n\r\n    const { dispatch } = useContext(AuthContext)\r\n\r\n    const obj = {\r\n        name: 'alejandro'\r\n    }\r\n\r\n    //Implementamos el metodo handleLogin\r\n    const handleLogin = () => {\r\n\r\n        //1. Video 193 Recordando la última pagina visitada(esto solo lo hacemos en el PrivateRoute y Login), solo hicimos esto en las rutas privadas(PrivateRoute), primero se realizo el almacenamiento en LocalStorage desde PrivateRoute y luego acá en Login lo implementamos\r\n        const lastPathname = localStorage.getItem('last_Pathname') || '/'; //El mismo nombre que utilizamos en setItem en PrivateRoute es el mismo que utilizamos dentro del get('last_Pathname') acá. También existe la situción de que un usuario sea la primera vez que entre a la aplicación o que hayan purgado(formateado) el localStorage, en ese caso last_Pathname no tendría nada, por esa razón utlizamos los signos || para indicar que si no existe el last_Pathname, entonces se redireccione al valor '/' el cual es la ruta principal de nuestro DashboardRoutes que redirecciona a /marvel\r\n\r\n        // console.log(\"click\")\r\n        // history.push('/');//En el push agregamos la ruta a la cual queremos navegar. El problema del push() es que si le damos el click al boton \"atras\" del navegador nos devuelve al Login, para que no pase esto y reemplace el Login por otra página agregamos el replace\r\n        // history.replace('/'); //Con el replace lo que hace es reemplazar en la historia(history) que no visitó el Login, por lo tan al dar click al boton \"atras\" del navegador NO nos devuelve al Login\r\n\r\n        //Hacemos uso de nuestra función dispatch, NO enviamos la propiedad logged porque ya está establecida en true cuando enviamos un usuario\r\n        dispatch(\r\n            {\r\n                type: types.login, //Para evitar errores se utiliza de esta forma, de esa manera obligamos a que se ejecute el Login que es lo que queremos hacer en este caso\r\n                payload: obj\r\n            }\r\n        )\r\n\r\n        //2. Video 193 Recordando la última pagina visitada. Cambiamos \"history.replace('/');\" por lastPathname\r\n        history.replace(lastPathname); //Con el replace lo que hace es reemplazar en la historia(history) que no visitó el Login, por lo tan al dar click al boton \"atras\" del navegador NO nos devuelve al Login\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h1>Login </h1>\r\n            <hr />\r\n\r\n            <button\r\n                className=\"btn btn-primary\"\r\n                onClick={handleLogin}\r\n            >\r\n                Enter\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","export const heroes = [\r\n    {\r\n        'id': 'dc-batman',\r\n        'superhero':'Batman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Bruce Wayne',\r\n        'first_appearance':'Detective Comics #27',\r\n        'characters':'Bruce Wayne'\r\n    },\r\n    {\r\n        'id': 'dc-superman',\r\n        'superhero':'Superman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Kal-El',\r\n        'first_appearance':'Action Comics #1',\r\n        'characters':'Kal-El'\r\n    },\r\n    {\r\n        'id': 'dc-flash',\r\n        'superhero':'Flash', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Jay Garrick',\r\n        'first_appearance':'Flash Comics #1',\r\n        'characters':'Jay Garrick, Barry Allen, Wally West, Bart Allen'\r\n    },\r\n    {\r\n        'id': 'dc-green',\r\n        'superhero':'Green Lantern', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Alan Scott',\r\n        'first_appearance':'All-American Comics #16',\r\n        'characters':'Alan Scott, Hal Jordan, Guy Gardner, John Stewart, Kyle Raynor, Jade, Sinestro, Simon Baz'\r\n    },\r\n    {\r\n        'id': 'dc-arrow',\r\n        'superhero':'Green Arrow', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Oliver Queen',\r\n        'first_appearance':'More Fun Comics #73',\r\n        'characters':'Oliver Queen'\r\n    },\r\n    {\r\n        'id': 'dc-wonder',\r\n        'superhero':'Wonder Woman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Princess Diana',\r\n        'first_appearance':'All Star Comics #8',\r\n        'characters':'Princess Diana'\r\n    },\r\n    {\r\n        'id': 'dc-martian',\r\n        'superhero':'Martian Manhunter', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'J\\'onn J\\'onzz',\r\n        'first_appearance':'Detective Comics #225',\r\n        'characters':'Martian Manhunter'\r\n    },\r\n    {\r\n        'id': 'dc-robin',\r\n        'superhero':'Robin/Nightwing', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dick Grayson',\r\n        'first_appearance':'Detective Comics #38',\r\n        'characters':'Dick Grayson'\r\n    },\r\n    {\r\n        'id': 'dc-blue',\r\n        'superhero':'Blue Beetle', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dan Garret',\r\n        'first_appearance':'Mystery Men Comics #1',\r\n        'characters':'Dan Garret, Ted Kord, Jaime Reyes'\r\n    },\r\n    {\r\n        'id': 'dc-black',\r\n        'superhero':'Black Canary', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dinah Drake',\r\n        'first_appearance':'Flash Comics #86',\r\n        'characters':'Dinah Drake, Dinah Lance'\r\n    },\r\n    {\r\n        'id': 'marvel-spider',\r\n        'superhero':'Spider Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Peter Parker',\r\n        'first_appearance':'Amazing Fantasy #15',\r\n        'characters':'Peter Parker'\r\n    },\r\n    {\r\n        'id': 'marvel-captain',\r\n        'superhero':'Captain America', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Steve Rogers',\r\n        'first_appearance':'Captain America Comics #1',\r\n        'characters':'Steve Rogers'\r\n    },\r\n    {\r\n        'id': 'marvel-iron',\r\n        'superhero':'Iron Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Tony Stark',\r\n        'first_appearance':'Tales of Suspense #39',\r\n        'characters':'Tony Stark'\r\n    },\r\n    {\r\n        'id': 'marvel-thor',\r\n        'superhero':'Thor', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Thor Odinson',\r\n        'first_appearance':'Journey into Myster #83',\r\n        'characters':'Thor Odinson'\r\n    },\r\n    {\r\n        'id': 'marvel-hulk',\r\n        'superhero':'Hulk', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Bruce Banner',\r\n        'first_appearance':'The Incredible Hulk #1',\r\n        'characters':'Bruce Banner'\r\n    },\r\n    {\r\n        'id': 'marvel-wolverine',\r\n        'superhero':'Wolverine', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'James Howlett',\r\n        'first_appearance':'The Incredible Hulk #180',\r\n        'characters':'James Howlett'\r\n    },\r\n    {\r\n        'id': 'marvel-daredevil',\r\n        'superhero':'Daredevil', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Matthew Michael Murdock',\r\n        'first_appearance':'Daredevil #1',\r\n        'characters':'Matthew Michael Murdock'\r\n    },\r\n    {\r\n        'id': 'marvel-hawkeye',\r\n        'superhero':'Hawkeye', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Clinton Francis Barton',\r\n        'first_appearance':'Tales of Suspense #57',\r\n        'characters':'Clinton Francis Barton'\r\n    },\r\n    {\r\n        'id': 'marvel-cyclops',\r\n        'superhero':'Cyclops', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Scott Summers',\r\n        'first_appearance':'X-Men #1',\r\n        'characters':'Scott Summers'\r\n    },\r\n    {\r\n        'id': 'marvel-silver',\r\n        'superhero':'Silver Surfer', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Norrin Radd',\r\n        'first_appearance':'The Fantastic Four #48',\r\n        'characters':'Norrin Radd'\r\n    }\r\n]","//Para renderizar las imagenes de manera dinamica desde la carpeta \"src\"\r\nexport const heroImages = require.context('../assets/heroes', true); // Esto es propio de webpack \"require.context()\" leer desde los recursos que dio el profesor. El segundo argumento(true) es para que busque imagenes en subdirectorios(otros directorios dentro del directio \"assets\")\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './HeroCard.css'\r\n//Como tenemos las imagenes en el directorio \"src\" en lugar de assets utilizamos el webpack para mostrar las imagenes de manera dinamica(que cambien dependiendo de su id), hacemos la importacion desde heroeScreen\r\nimport { heroImages } from '../../helpers/heroImages';\r\n\r\n\r\n\r\nexport const HeroCard = ({ id, superhero, publisher, alter_ego, first_appearance, characters }) => {\r\n\r\n\r\n    return (\r\n        <Link to={`./hero/${id}`} > {/*Con este link envia el id a la ruta ./hero */}\r\n \r\n                <div className=\"card my-card \">\r\n                    {/* <img src={`./assets/heroes/${id}.jpg`} className=\"card-img\" alt={superhero} /> */}\r\n                    <img src={ heroImages(`./${id}.jpg`).default} className=\"card-img\" alt={superhero} />\r\n                    <div className=\"profile-name\">{superhero}</div>\r\n                    <div className=\"profile-position\">{alter_ego}</div>\r\n                    <div className=\"profile-overview\">\r\n                        <div className=\"profile-overview\">\r\n\r\n                            <h3>{publisher}</h3>\r\n                            <p>Primera aparición: <br />{first_appearance}</p>\r\n                            {\r\n                                // Si los alter_ego son diferentes a los characters entonces que muestre los otros caracteres en párrafos, un personaje puede tener varios characters(nombres)\r\n                                (alter_ego !== characters)\r\n                                && <p>{characters}</p>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n        </Link>\r\n    )\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { getHeroesByPublisher } from '../../selectors/getHeroesByPublisher';\r\nimport { HeroCard } from './HeroCard';\r\n\r\nexport const HeroesList = ({ publisher }) => { //Recibimos el publisher desde DCScreen y MarvelScreen. publisher se en encuentra en nuestro arreglo de heroes y solo tendremos 2 tipos de publisher(DC Comics y Marvel Comics)\r\n\r\n    // utilizamos nuestro selector\r\n    // Como NO vamos a mutar la información simplemente creamos la constante heroes\r\n    // const heroesss = getHeroesByPublisher( publisher ); // Enviamos el publisher\r\n\r\n    //Creamos nuestra variable memorizada. 178-useMemo. Si el publisher no cambia no tiene porque volver a generar la información, por eso utilizamos el useMemo para memorizar\r\n    const heroesss = useMemo(() => getHeroesByPublisher(publisher), [publisher]); //Se ejecuta la función solamente si el [publisher] cambia \r\n    return (\r\n        //Quitamos la etiqueta <ul/> y añadimos el </div> para trabajar con las cards de Boostrap\r\n\r\n        //    <div className=\"row row-cols-md-3  \">\r\n        <div className=\"container\">\r\n            <div className=\" row row-cols-1 row-cols-md-2 g-4 g-lg-3 row-cols-xl-4 g-xl-auto row-cols-xs-2 g-xs-2 animate__animated animate__fadeIn\">\r\n\r\n                {/*Ahora barremos cada uno de los elementos para mostrarlos en pantalla */}\r\n                {//Estos {} es para utilizar la expresión de JS\r\n\r\n                    heroesss.map(hero => ( //Este () es para retornar un objeto\r\n                        // Cambiamos el <li/> por <HeroCard/>\r\n                        <HeroCard\r\n                            key={hero.id}\r\n                            {...hero} /*Enviamos el operador express a HeroCard para extraer cada una de las propiedades de hero */\r\n                        />\r\n\r\n                    ))\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroesByPublisher = ( publisher ) => { //Recibimos el publisher desde HeroesList\r\n\r\n    // Creamos una validación por si se escribe un tipo de publisher que no existe entonces dé un error\r\n    const validPublishers = ['DC Comics', 'Marvel Comics']; // Si envía cualquier cosa que NO esté dentro de este arreglo entonces que envíe un error\r\n\r\n    if(!validPublishers.includes( publisher )){ //Barremos el valiPublishers y debe incluir el pusblisher que estamos enviando por argumento\r\n    \r\n        // Si encuentra el publisher entonces devuelve un true y si no ejecuta el error\r\n        throw new Error(`Publisher \"${ publisher}\" no es correcto`);\r\n\r\n    }\r\n    //Hace el filtrado del arreglo y nos devuelve el hero siempre y cuando hero.publisher sea igual al publisher que recibimos por argumento\r\n    return heroes.filter( hero => hero.publisher === publisher)//Caso contrario filtramos el arreglo\r\n}","import React from 'react';\r\n// import { heroes } from '../../data/heroes'\r\nimport { HeroesList } from '../heroes/HeroesList';\r\nimport '../marvel/Marvel-DC.css';\r\n\r\n//Como el Logo de Marvel es estático utilizamos el import en lugar de heroImages(este se importa desde heroeScreen)\r\nimport marvel from '../../assets/heroes/marvel-logo.png';\r\n\r\n\r\nexport const MarvelScreen = () => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <h1>Marvel Screen</h1> */}\r\n\r\n            <div className=\"contenedorPadre \">\r\n\r\n                <div className=\"marvel-logo animate__animated animate__pulse\">\r\n                    {/* <img src={`./assets/heroes/marvel-logo.png`} className=\"card-img\" /> */} {/*Esto se utiliza cuando la imagen está en public/assets/heroes */}\r\n                    <img src={marvel} className=\"card-img\" /> {/*Imagen estatica desde la carpeta \"src\" utilizamos el import */}\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <hr />\r\n\r\n            <HeroesList publisher={'Marvel Comics'} /> {/*Esto es lo que le enviamos al publisher */}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Link, NavLink, useHistory } from 'react-router-dom'\r\nimport { AuthContext } from '../../auth/AuthContext';\r\nimport { types } from '../../types/types';\r\n\r\nexport const Navbar = () => { //En Navbar no se puede utilizar el {history} ya que history en Navbar tiene el valor de \"undefined\" es to es debido a que Navbar no se encuentra dentro de las rutas(Route), Navbar como tal es un componente que está por aparte, para hacer uso de rutas tengo que hacer uso obligatorio del customHook useHistory. Otra forma de hacer, pero, no es lo mejor, ya que, es para evitar escribir menos codigo, sería enviar el history al Navbar desde el componente de ruta DashboarRoutes\r\n\r\n    // const [show, setShow] = React.useState(false);\r\n\r\n    //Con user:{name} extraemos la propiedad \"name\" del objeto \"user\"\r\n    const { user: { name }, dispatch } = useContext(AuthContext);\r\n    \r\n    \r\n    const {push} =useHistory();\r\n\r\n    //Hacemos el Logout\r\n    const handleLogout= ()=>{\r\n        \r\n        push('/login');\r\n\r\n        dispatch({\r\n            type: types.logout\r\n        });\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"nav-item \">\r\n                    <Link\r\n                        className=\"navbar-brand nav-link\"\r\n                        to=\"/\"\r\n                        style={{ marginLeft: 15 }}\r\n                    >\r\n                        Asociaciones\r\n                    </Link>\r\n                </div>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-1 mb-lg-0\">\r\n                        <div className=\"nav-item \">\r\n                            <NavLink\r\n                                activeClassName=\"active\"\r\n                                className=\"nav-link\"\r\n                                exact\r\n                                to=\"/marvel\"\r\n                            >\r\n                                Marvel\r\n                    </NavLink>\r\n                        </div>\r\n\r\n                        <div className=\"nav-item \">\r\n\r\n                            <NavLink\r\n                                activeClassName=\"active\"\r\n                                className=\"nav-link\"\r\n                                exact\r\n                                to=\"/dc\"\r\n                            >\r\n                                DC\r\n                    </NavLink>\r\n                        </div>\r\n\r\n                        <div className=\"nav-item\">\r\n\r\n                            <NavLink\r\n                                activeClassName=\"active\"\r\n                                className=\"nav-link\"\r\n                                exact\r\n                                to=\"/search\"\r\n                            >\r\n                                Search\r\n                    </NavLink>\r\n                        </div>\r\n                    </ul>\r\n\r\n                    <div className=\"nav-item dropdown \">\r\n                        <a className=\"navbar-brand nav-link dropdown-toggle\" id=\"navbarDarkDropdownMenuLink\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                            <lord-icon\r\n                                src=\"https://cdn.lordicon.com/dxjqoygy.json\"\r\n                                trigger=\"hover\"\r\n                                colors=\"primary:#e4e4e4,secondary:#e4e4e4\"\r\n                                stroke=\"60\"\r\n                                style={{ width: 38, height: 38 }}>\r\n                            </lord-icon>\r\n                            {/* {name} */} {/*Esto es para agregar el nombre del user logueado a la par del iconUser*/}\r\n                        </a>\r\n                        <ul className=\"dropdown-menu dropdown-menu-dark\" aria-labelledby=\"navbarDarkDropdownMenuLink\">\r\n\r\n                            <span className=\"ms-3\" style={{color:\"#5cb85c\"}}> {name} {/*Esto es para agregar el nombre del user logueado a la par del iconUser*/}</span>\r\n                            <button\r\n                                \r\n                                className=\"dropdown-item\"\r\n                                onClick ={handleLogout}\r\n                            >\r\n                                Logout\r\n                            </button>\r\n\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\n// import { heroes } from '../../data/heroes'\r\nimport { HeroesList } from '../heroes/HeroesList'\r\nimport '../marvel/Marvel-DC.css';\r\n\r\n//Como el Logo de DC es estático utilizamos el import en lugar de heroImages(este se importa desde heroeScreen)\r\nimport dc from '../../assets/heroes/DC-logo.png';\r\n\r\n\r\nexport const DcScreen = () => {\r\n    return (\r\n        <div>\r\n            {/* <h1 className=\"text-center fw-bold display-4\" style={{backgroundColor:\"rgb(12, 124, 236)\", color:\"white\"}}>DC Screen</h1> */}\r\n            <div className=\"contenedorPadre\">\r\n                <div className=\"dc-logo animate__animated animate__pulse\">\r\n                    {/* <img src={`./assets/heroes/DC-logo.png`} className=\"card-img\" /> */} {/*Esto se utiliza cuando la imagen está en public/assets/heroes */}\r\n                    <img src={dc} className=\"card-img\" /> {/*Imagen estatica desde la carpeta \"src\" utilizamos el import */}\r\n                    {/* <h1 className=\"titulo display-1 fw-bold\" >DC Comics</h1> */}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* <div className=\"reset\"></div> */}\r\n\r\n            <hr />\r\n            <HeroesList publisher=\"DC Comics\" /> {/* Envia los publisher como un string si no agrego la expresión de JS {}, ver ejemplo en el MarvelScreen lo hice de la otra forma, cualquier de las dos formas es correcta */}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport { Redirect, useHistory, useParams } from 'react-router'\r\nimport { getHeroeById } from '../../selectors/getHeroeById';\r\nimport './HeroeScreen.css';\r\n\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n//Video 212 Trabajando con imagenes\r\n//Esta es una manera de trabajar con imagenes con contenido estático( es decir no cambian ). El problema es que las imagenes tienen que cambiar con base a su heroeId(dinamicamente)\r\n// import batman from '../../assets/heroes/dc-batman.jpg';\r\n\r\nimport { heroImages } from '../../helpers/heroImages';\r\n//Para hacer renderizar las imagenes de manera dinamica desde la carpeta \"src\"\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n//Necesitamos extraer los id enviados el componente HeroeCard.js por el URL\r\n//Con este CustomHook extraeremos los parametros que vayan por el URL\r\nexport const HeroeScreen = ({ history }) => { //Esta propiedad la extraemos de HeroScreen, ir a la pestaña componets desde el navegador y al final HeroeScreen. utilizaremos el history para devolvernos a la página anterior\r\n    //----------------------------------------------------------------------------------------------------------------   \r\n    // const params=useParams();\r\n    // console.log(params);// {heroeId: \"marvel-spider\"} //Devuelve un objeto\r\n    const { heroeId } = useParams();\r\n    // console.log(heroeId);\r\n\r\n    //----------------------------------------------------------------------------------------------------------------   \r\n    //Necesitamos toda la información del Heroe. Hacemos uso del selector getHeroeById\r\n    // const hero = getHeroeById(heroeId);\r\n    // console.log(hero);\r\n\r\n    //useMemo. Si el heroeId no cambia no tiene porque volver a generar o ejecutar este codigo\r\n    const hero = useMemo(() => getHeroeById(heroeId), [heroeId]);\r\n\r\n    if (!hero) { //Si hero no existe \"undefined\" entonces obligatoriamente tiene que retornar algo, en este caso retorna el componente <Redirect to=\"/\"/> para que redireccione a la pagina de Marvel\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    // const { replace } = useHistory(); //Esto se utiliza en la linea 41\r\n\r\n    const handleBack = () => { //Necesitaremos la propiedad history -> goBack\r\n\r\n        //Primera forma de hacer que vuelva a la pagina anterior cuando estamos navegando en incognito, pero la mejor manera de hacerlo es utilizando el customHook de history ,ver en la segunda forma \r\n        if(history.length <= 2){ //Si la longitud del historial es menor a 2, osea, es 1 entonces redirige a marvel\r\n            history.push('/');\r\n        } else{\r\n\r\n            history.goBack(); //Devolverse a la pagina anterior\r\n        }\r\n        //-----------------------------------------------------------------------------------------------\r\n\r\n        //Segunda forma utilizando el useHistory\r\n        // replace(`/${publisher === \"DC Comics\" ? \"dc\" : \"marvel\"}`); //Si el publisher fuera igual a DC Comics vaya a la ruta dc de lo contrario publisher es igual a Marvel Comics por lo tanto va a la ruta marvel, tendriamos que cambiarlo si tuvieramos más de 2 publisher, tal ves con un switch(me permite tener varios casos). OJO: si utilizo el history.replace tendría que poner la barra al frente de dc y marver, ejemplo: /dc y /marvel \r\n    }\r\n\r\n    //Desestructuramos el objeto, quitamos el \"id\" porque el id es heroeId. Tenemos un proble y es que si escribimos cualquier cosa en el url que no sea un id nos dará undefine y por ende un error y tenemos que manejar eso \r\n    const { superhero, publisher, alter_ego, first_appearance, characters } = hero;\r\n\r\n    //usehistory\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"d-flex justify-content-center\">\r\n\r\n        <div className=\"card mb-3 mt-5\" >\r\n            <div className=\"row g-0\">\r\n                <div className=\"col-md-4 col-md-auto col-sm-12  img-card animacion\">\r\n                    <img\r\n                        // src={`../assets/heroes/${heroeId}.jpg`} //Desde public/assets. Si tenemos las imagenes en el directorio public utilizamos este código\r\n                        // src={batman}// Esto es cuando tenemos un import. Estatico\r\n                        src={ heroImages(`./${heroeId}.jpg`).default } // Para mostrar las imagenes de forma dinamica con el require.context. Como estamos trabajando con imagenes se agrega el default\r\n                        className=\"img-thumbnail\"\r\n                        \r\n                        />\r\n                </div>\r\n                <div className=\"col-md-8 col-md-auto col-sm-12 \">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title display-3 mb-4 ms-4\">{superhero}</h5>\r\n                        <ul className=\"card-text list- group list-group-flush\">\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> Alter ego:</b > {alter_ego}</p></li>\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> Publisher:</b> {publisher}</p></li>\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> First appearance:</b> {first_appearance}</p></li>\r\n                        </ul>\r\n                        <br />\r\n                        <div style={{ marginLeft: 47 }}>\r\n\r\n                            <h5 className=\"mov-izq-der\"  > Characters</h5>\r\n                            <p className=\"mb-5 mov-izq-der\">{characters}</p>\r\n                            <button\r\n                                className=\"btn-lg mov-izq-der\"\r\n                                onClick={handleBack}\r\n                                >\r\n                                Back\r\n                </button>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                                    </div>\r\n        // <div className=\"row mt-5\">\r\n        //     <div className=\"col-3\" style={{border:\"dotted\",borderColor:\"red\"}}>\r\n        //         <img \r\n        //             src={`../assets/heroes/${ heroeId }.jpg`}\r\n        //             className=\"img-thumbnail\"\r\n        //         />\r\n        //     </div>\r\n        \r\n        //     <div className=\"col-7\">\r\n        //         <h3> {superhero}</h3>\r\n        //         <ul className=\"list- group list-group-flush\">\r\n        //             <li className=\"list-group-item\"><b> Alter ego:</b> {alter_ego}</li>\r\n        //             <li className=\"list-group-item\"><b> Publisher:</b> {publisher}</li>\r\n        //             <li className=\"list-group-item\"><b> First appearance:</b> {first_appearance}</li>\r\n        //         </ul>\r\n        \r\n        //         <h5> Characters</h5>\r\n        //         <p>{characters}</p>\r\n        \r\n        //         <button \r\n        //         className=\"btn btn-outline-info\"\r\n        //         onClick={handleBack}\r\n        //         >\r\n        //             Back\r\n        //         </button>\r\n        //     </div>\r\n        \r\n        // </div>\r\n        )\r\n    }\r\n    ","import { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroeById = ( id ) => { //Recibimos el id //Este es el id que escribimos\r\n\r\n\r\n   //Ponemos el find, eso quiere decir que apenas encuentre uno eso sería todo\r\n    return heroes.find( hero => hero.id === id)//Caso contrario filtramos el arreglo\r\n}","import React, { useMemo } from 'react';\r\nimport queryString from 'query-string';\r\nimport { useLocation } from 'react-router';\r\nimport { heroes } from '../../data/heroes'\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { HeroCard } from '../heroes/HeroCard';\r\nimport { getHeroesByName } from '../../selectors/getHeroesByName';\r\n\r\nexport const SearchScreen = ({ history }) => {//1.QueryString. Hacemos el history para poder hacer un push()\r\n\r\n    //3.QueryString. Utilizamos el hook para extraer la \"location \"de searchScreen, esta \"location\" se pudo hacer igual al history, pero, es solo para ver el ejemplo utilizando el customHook\r\n    const location = useLocation();\r\n    // console.log(location); //location.search para imprimir la propiedad search de la location\r\n    //4.QueryString. Uso de npm query-string\r\n    // console.log(location.search);\r\n    // console.log(queryString);\r\n    //Pasamos nuestro objeto location.search a queryString\r\n    // console.log(queryString.parse(location.search));\r\n    //5.QueryString. Desestructuramos para extraer solo el query que nos interesa el cual es solo uno en este caso solo utilizaremos el query \"q\"\r\n    const { q = '' } = queryString.parse(location.search);//Inicializamos el query en como string vacío para que no sea undefined en caso de que no tenga un valor\r\n    // console.log(q); //Imprime batman\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Uso del customHook useForm\r\n    const [values, handledInputChange,reset] = useForm({ //Primero necesitamos el name del input\r\n        // searchText:''. Lo incializamos como un string vacío\r\n        searchText: q // 6.QueryString. Agregamos como valor inicial de nuestro searchText el query(q), de esta forma si se realiza un refresh de nuestra pagina, se mantendrá como valor incicial el \"q\", por lo tanto muestra el superheroe que se encuentra en el query\r\n    });\r\n\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Segundo paso, extraemos el searchText de nuestro values. Hacemos la desestructuracion.\r\n    //Utilizamos el searchText que extraimos desde values para usarlo en el form(en values=\"searchText\")\r\n    const { searchText } = values;\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Creamos una costante para almacenar los heroes y luego realizar el map()\r\n    // const heroesFiltered = heroes;\r\n    //Utilizamos la función para obtener los heroes filtrados. Video 182\r\n    // Utilizamos el useMemo porque cada vez que digitamos una tecla del teclado vuelve a ejecutar esta función, entonces, ahora solo se ejecuta cuando cambie el query(q)\r\n    // const heroesFiltered = useMemo(() => getHeroesByName( searchText ), [q]); //El searchText representa al \"name\" en el archivo getHeroesByName\r\n    const heroesFiltered = useMemo(() => getHeroesByName(q), [q]); //Si lo agrego como la linea de arriba, la linea 42 va a funcionar, pero, muestra una advertencia \"React useMemo has a missing dependency\": 'searchText'\", eso quiere decir que useMemo tiene una dependencia faltante debido a que searchText tendría que estar como dependencia en lugar de la \"q\" \r\n    //Tambien gracias al useMemo si le damos click a un personaje y luego le damos en el boton \"Back\" me muestra la busqueda tal y como se realizó la última vez, ya que, estamos trabajando en base al Query String y la funcíon getHeroesByName no se está disparando gracias al useMemo porque tenemos memorizados esos valores\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    \r\n    const handleSearch = (e) => {\r\n        e.preventDefault();//Para que NO haga el refresh de la pagina\r\n        // console.log(searchText);//Imprimimos lo que sea que la persona escriba y damos a la tecla \"Enter\"\r\n\r\n        //2.Query String. Cuando la persona ingresa al texto(el que imprimimos en consola(searchText)), hacemos el push()\r\n        history.push(`?q=${searchText}`);//Añadimos una \"?q\" de query(se puede agregar otra cosa en lugar de la \"q\") y luego agregamos el texto que buscamos(serachText);\r\n        \r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Search Screen</h1>\r\n            <hr />\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-10\">\r\n\r\n                    <h4>Search form</h4>\r\n                    <hr />\r\n\r\n\r\n                    <form onSubmit={handleSearch} className=\"d-flex\">\r\n\r\n                        <input\r\n                            type=\"search\"\r\n                            placeholder=\"Find your heroe\"\r\n                            className=\"form-control me-2\"\r\n                            aria-label=\"Search\"\r\n                            autoComplete=\"off\"\r\n                            name=\"searchText\"\r\n                            values={searchText}\r\n                            onChange={handledInputChange}\r\n                        />\r\n                        <button\r\n                            type=\"submit\" /*Esto es para cuando le demos click al boton o teclemos Enter entonces que haga el posteo */\r\n                            className=\"btn m-1 btn-block btn-outline-primary\"\r\n                        >\r\n                            Search...\r\n                    </button>\r\n                    </form>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            {/* Aquí colocamos el resultado de un arreglo */}\r\n\r\n            <h4 className=\"mt-4\"> Results </h4>\r\n            <hr />\r\n\r\n                {\r\n                    (q === '') \r\n                    &&\r\n                    <div className=\"text-center alert alert-info\">\r\n                        Search a hero\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    (q !== '' && heroesFiltered.length === 0) //Si el query es distinto de vacío y si la longitud del heroesFiltered es 0 entonces haga lo siguiente: \r\n                    &&\r\n                    <div className=\"text-center alert alert-danger\">\r\n                        There is no a hero with <strong>{q}</strong> \r\n                    </div>\r\n                }\r\n            <div className=\"row row-cols-auto row-cols-lg-3 g-auto g-lg-3 row-cols-xl-4 g-xl-auto row-cols-xs-2 g-xs-2 animate__animated animate__fadeIn\">\r\n                \r\n                \r\n                {/* Colocamos la expression de JS */}\r\n                {\r\n                    heroesFiltered.map(herOe => ( //El parentesis ver es porque retorna un objeto\r\n\r\n                        <HeroCard\r\n                            key={herOe.id}\r\n                            //Eviamos todas las propiedades del heroe\r\n                            {...herOe}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n   \r\n    const [values, setValues] = useState(initialState);\r\n\r\n     //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    // *** Función para limpiar los inputs después de escribir algo ***\r\n    const reset= () =>{\r\n        setValues( initialState );\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    // *** Función handledInputChange ***\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n    const handledInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value //se entiende que el value que tiene el input, que llega por medio del evento, asignaselo a la propiedad del state que tenga ese nombre hasta ahí se entiende bien\r\n        });\r\n\r\n    }\r\n     //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    \r\n    return [ values, handledInputChange, reset ]; //Puedo retornar un arreglo u objeto, en este caso retornaremos un arreglo\r\n}\r\n","import { heroes } from '../data/heroes';\r\nimport { useForm } from '../hooks/useForm';\r\n\r\n\r\nexport const getHeroesByName = (name='') => { //Recibe lo que se escribe en el input del componente SarchScreen.js. Lo inicializamos como un string vacio para que regrese todos\r\n\r\n//Condicional si no recibe un string\r\nif(name === ''){ //Si el name es igual a un string vacío, esto es porque si no hemos escrito nada, puede que estemos en la pantalla inicial y no queremos revisar ningun elemento, pero en el momento que el name tenga un valor aplica el filter(filtro)\r\n    return [];\r\n}\r\n\r\n    name= name.toLocaleLowerCase();//toLocaleLowerCase para pasarlo a minuscula\r\n    return heroes.filter(heroName => heroName.superhero.toLocaleLowerCase().includes(name))//El includes es para que el name que está recibiendo como argumento lo va a regresar. \r\n    //El filter practicamente me permite buscar cada super heroe por el nombre, si agrego una \"b\" entonces van apareciendo super heroes que empiecen con esa letra, el include es para \r\n    //que devuelva solo 1 personaje y no todos. El name es el pasó de ser \"searchText\" a \"q\" en el archivo SearchScreen, es lo que escribimos en la caja de texto\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n<footer className=\"bg-dark text-center text-white\" style={{bottom:0, marginTop:233}}>\r\n\r\n  <div className=\"text-center p-3\" style={{backgroundColor:\"#000000\", opacity:0.2}}>\r\n    © 2021 Copyright:\r\n    <a className=\"text-white ms-1\" href=\"https://www.youtube.com/watch?v=LXb3EKWsInQ\"> Alejandro CM</a>\r\n  </div>\r\n</footer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router'\r\nimport { DcScreen } from '../components/dc/DcScreen'\r\nimport { HeroeScreen } from '../components/heroes/HeroeScreen'\r\nimport { MarvelScreen } from '../components/marvel/MarvelScreen'\r\nimport { SearchScreen } from '../components/search/SearchScreen'\r\nimport { Footer } from '../components/ui/Footer'\r\nimport { Navbar } from '../components/ui/Navbar'\r\n\r\nexport const DashboardRoutes = (/*{history}*/) => {\r\n    return (\r\n        <> {/*Este fragment se agrega porque hay más de un elemento html, hay un <Navbar/> y el <div/> */}\r\n         \r\n         <Navbar /*history={history}*/ /> {/*Se pasa el history al Navbar para utilizar la propiedad \"history\". Solo que en lugar de hacer esto, utilizamos el customHook useHistory en el ui/Navbar.*/}\r\n         \r\n          \r\n            <div className=\"container mt-2\">\r\n                <Switch>\r\n  \r\n                    <Route exact path=\"/marvel\" component={ MarvelScreen } />\r\n                    {/* Este componente va a recibir un argumento por el url \":heroeId\" */}\r\n                    <Route exact path=\"/hero/:heroeId\" component={ HeroeScreen } />\r\n                    <Route exact path=\"/dc\" component={ DcScreen } />\r\n                    <Route exact path=\"/search\" component={ SearchScreen } />\r\n\r\n                    {/* Si no nos encontramos en alguna de la rutas anteriores(marvel,heroe/:heroeID o dc) entonces nos redireccione a path de marvel */}\r\n                 {/*El Redirect también se puede utilizar para validaciones, por ejemplo, si algo no viene entonces que llame al Redirect  */}\r\n                  <Redirect to=\"/marvel\" />\r\n                 \r\n                </Switch>  \r\n            </div>  \r\n\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'; //Importamos los Protypes porque necesito obligarme a utilizarlo de manera correcta. Necesitamos al menos al isAuthenticated y el componente \r\n\r\n//Utilizamos las llaves porque vamos a recibir varios elementos en las properties\r\nexport const PrivateRoute = ({\r\n    isAuthenticated, //De alguna manera tenemos que saber si está autenticado por lo que creamos una propiedad llamada \"isAuthenticated\"\r\n    component: Component, //También necesitaremos el componente que la persona quiere renderizar. lo renombramos al componente como \"Component\" con C mayuscula porque si lo dejamos en minuscula se miraría como un elemento html\r\n    ...rest  //Los demás argumentos como el exact, el path y todo lo demás necesitamos recuperlos y los almacenamos utilizando el operador ...rest(el resto), de esta manera, podremos pasarle dichos argumentos al componente de la manera en la que queramos\r\n}) => {\r\n\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n    //193. Recordar la última pagina visitada. \r\n    //Del rest ocuparemos el location.pathname\r\n    //No es necesario utilizar el customHook para acceder al \"location\" porque ya lo tenemos en el ..rest\r\n\r\n    // console.log(rest.location.pathname); //Esto lo almacenamos en el LocalStorage\r\n    //Almacenamiento del pathname en LocalStorage\r\n    localStorage.setItem('last_Pathname', rest.location.pathname) //Le damos por nombre \"last_Pathname\". Almacenamos el pathname pero, no almacenamos el query, si quisieramos podemos almacenar el pathname y concatenarlo con el query (el query por ejemplo en el componente Search si busco algo en el input lo que escriba en ese input va a ser el query)\r\n    //Ahora nos vamos al componente Login a implementarlo\r\n\r\n    //--------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        //Regresamos o retornamos un \"Route\". Vamos a regresar una ruta de \"react-router DOM\"\r\n        //La ruta a a tener el ..rest(resto de propiedades que estamos recibiendo ahí, el exact, el path y todo lo demás)\r\n        <Route {...rest} //El ...rest tiene almacena el exact, el path y demás cosas. El path, exact y más es enviado a este Route\r\n\r\n            //Queremos retornar el componente de manera condicional\r\n            component={(props) => (//El componente se va a llamr con este callback y va a recibir las \"props\", las props son el history, location y params. Como solo vamos a regresar algo quitamos las llaves {} y ponemos parentesis ()\r\n\r\n                //Hacemos la condición con un oprador ternario\r\n                (isAuthenticated)// Si está autenticado regresa el componente al cual el usuario quiere entrar, y le adicionamos con el operador express las \"props\", recordar que las props son history, location y params\r\n                    ? (<Component {...props} />) // Recordemos que este componente hace referencia al component ubicado en el archivo AppRouter y que ese es component={DashboardRoutes}, eso quiere decir que si está autenticado nos devuelve al DashboardRoutes y que este tiene como ruta principal a /marvel.Como saber cual es el operador express y cual es el rest. La respuesta es que el que está en los argumentos es el ...rest y el que se encuentra en en el Component es el express, en este caso \"...props\" es el operador express, en conclusion dependiendo del lugar donde se use le cambia el nombre\r\n                    //Component es el componente que queremos renderizar, eso quiere decir que si estamos logueados o autenticados manda todo lo mismo de igual forma (manda las ...props las cuales son el history, location y params). Con esto todo manda lo mismo, es decir todo queda igual.\r\n                    //Si no está autenticado utilizamos el componente Redirect, para redirecionarlo a la pagina de Login\r\n                    : (<Redirect to=\"/login\" />) //Podemos agregar la ruta que la persona quiera, podemos leer el path y muchas cosas y almacenar eso en el LocalStorage o en una cookie, para que cuando el usuario se autentique vaya a la pagina que él quería   \r\n            )}\r\n\r\n        />\r\n    )\r\n}\r\n\r\n//Los Proptypes nos permite utilizar nuestro componente PriveRoute de manera correcta. \r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n/*Una vez tenemos listo este componente PrivateRoute lo vamos a implementar en AppRouter, en AppRouter sustituimos el Route que contiene nuestro DashboardRoutes por el PrivateRoute para que proteja todas las rutas dentro del DashboardRoutes\r\nPodemos utilizar nuestro PrivateRoute en el DashboarRoutes, pero, no es necesarios cambiar cada Route por PrivateRoute y que con tan solo proteger la Route de DashboardRoutes que se encuentra en AppRoute protejo a todas las que se encuentra en el DashboarRoutes*/\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router'\r\nimport PropTypes from 'prop-types';\r\n\r\n// Esta ruta es similar a la de PrivateRoute solo que tiene un cambio\r\n\r\nexport const PublicRoute = ({ //Se utiliza llaves porque PublicRoute RECIBE por argumento lo definido PublicRoute que se enceuntra en AppRouter\r\n    isAuthenticated,\r\n    component: Component, //componente es renombrado Component en este archivo\r\n    ...rest\r\n}) => {\r\n    return (\r\n\r\n        <Route {...rest} // ...rest = pacth, exatc, etc...\r\n         \r\n        component = { (props) => ( //Con esete callback recibimos las props\r\n\r\n            //De esta manera si estamos autenticados y alguien pone en el url para ir al Login, no lo va a permitir\r\n            (!isAuthenticated)// Si NO está autenticado mostramos el componente\r\n                ? (<Component { ...props } />) //Este Component recibe lo del component que se ubica en el archivo AppRouter.Muestra el componente que está solicitando únicamente si NO está autenticado. Recordemos que este componente hace referencia al component ubicado en el archivo AppRouter y que ese es component={LoginScreen}, eso quiere decir que si NO está autenticado nos devuelve al Login.El componente recibe todas las props(history, location y params).\r\n                : (<Redirect to=\"/\" />) //Si está autenticado lo enviamos al DashboarRoute y no al Login\r\n             \r\n        \r\n            )}\r\n\r\n        \r\n        />\r\n        \r\n    )\r\n}\r\n\r\nPublicRoute.propTypes ={\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    // Route\r\n\r\n} from \"react-router-dom\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport { LoginScreen } from \"../components/login/LoginScreen\";\r\nimport { MarvelScreen } from \"../components/marvel/MarvelScreen\";\r\n\r\nimport { Navbar } from \"../components/ui/Navbar\";\r\nimport { DashboardRoutes } from \"./DashboardRoutes\";\r\nimport { PrivateRoute } from \"./PrivateRoute\";\r\nimport { PublicRoute } from \"./PublicRoute\";\r\n\r\nexport const AppRouter = () => {\r\n\r\n    // Nos vamos a components en el navegador y nos dirigimos a HeroesApp y ahí nos daremos cuenta si está autenticado o no, para hacer eso vamos a hacer el useContext\r\n    const {user} = useContext(AuthContext);\r\n    console.log(user);\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n\r\n                <Switch>\r\n\r\n                    {/* exact para que la ruta siempre sea exacta */}\r\n                    <PublicRoute\r\n                     exact path=\"/login\" \r\n                     component={LoginScreen} \r\n                     isAuthenticated = {user.logged}\r\n                     />\r\n\r\n                    {/*No se agrega el exact porque se presentan inconvenientes */}\r\n                    <PrivateRoute \r\n                    path=\"/\" //El path no lo recibe ni la propiedad isAuthenticated ni el component, lo recibe el operador ..rest(recibe el resto o lo demás, en este caso recibe el path , el exact y otros, en este caso solo recibe el path porque es el unico que se encuetra acá)  \r\n                    component={DashboardRoutes} //Este es el componente que carga si está autenticado, este componente lo recibe el PrivateRoute\r\n                    isAuthenticated= {user.logged} //Enviamos el valor de la propiedad logged para saber si está o no autenticado, este valor lo recibe la propiedad isAutheticated en el componente PrivateRoute.js\r\n                    /> {/*Implementamos nuestro PrivateRoute. Por ejemplo, el path que se encuentra aquí no está como isAutheticated(autenticado) ni component(Componente), entonces el path cae en el ...rest(todo esto en el archivo PrivateRoute.js)*/}\r\n               \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React, { useEffect, useReducer } from 'react'\r\nimport { AuthContext } from './auth/AuthContext'\r\nimport { authReducer } from './auth/authReducer'\r\nimport { AppRouter } from './routers/AppRouter'\r\n\r\nconst init = () => {//El init se va a encargar de revisar el LocalStorage a ver si tenemos ese objeto(user). Esto es lo que se ejecuta en el Init,luego se lo pasa al initialState({}) y de esta manera tendremos el estado actual de nuestra aplicación\r\n\r\n    return JSON.parse(localStorage.getItem('user')) || {logged: false}//Como ese user es un objeto, utilizamos el JSON.parse para evaluar ese LocalStorage, y si existe lo va a retorna, por el contrario, retornar un objeto que tenga el logged establecido en false {logged:false}\r\n}\r\n\r\nexport const HeroesApp = () => {\r\n    \r\n    //Como primer arguemento utilizamos el reducer ya creado, como segundo arguemento agregamos el initial state y por el momento va a ser un objeto vacío, como tercer argumento utilizamos el init porque vamos a leer el LocalStorage\r\n    const [user, dispatch] = useReducer(authReducer, {}, init); //nuestro authReducer va a regresar un user\r\n    \r\n    //useEffect\r\n    useEffect(() => { //Este efecto se utiliza porque si nos logueamos con un usuario y recargamos el navegador entonces se formatea, por loque al agregar el efecto aunque recarguemos(refrescar) la pagina no se pierde o formatea el usuario con el que me loguee\r\n\r\n        //Cada vez que cambia el user se establece el valor del usuario y el JSON.stringify es para convertirlo en string porque el local Storage no acepta objetos\r\n        localStorage.setItem('user',JSON.stringify(user));\r\n        \r\n    }, [user]); //El efecto se dispara cuando cambie los objetos user\r\n    \r\n    return (\r\n            // El value es lo que vamos a distribuir en nuestra aplicación, vamos a distribuir un objeto, creamos un reducer\r\n        <AuthContext.Provider value={{user, dispatch}}>   {/*El user y el dispatch es lo que vamos a distribuir con nuestro useContext. Ahora tenemos la habilidad de hacer dispatch u obtener el usuario a lo largo de cualquier parte de nuestra aplicación, inclusive estamos en nuestro LoginScreen o en las otras páginas donde ya estemos autenticados no importa porque HeroesApp es el segundo nivel más alto de nuestra aplicación despúes del index.js*/}\r\n            <AppRouter />\r\n        </AuthContext.Provider>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HeroesApp } from './HeroesApp';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n\n    <HeroesApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}