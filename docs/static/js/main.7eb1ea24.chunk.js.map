{"version":3,"sources":["components/login/LoginScreen.js","data/heroes.js","components/heroes/HeroCard.js","components/heroes/HeroesList.js","selectors/getHeroesByPublisher.js","components/marvel/MarvelScreen.js","components/ui/Navbar.js","components/dc/DcScreen.js","components/heroes/HeroeScreen.js","selectors/getHeroeById.js","components/search/SearchScreen.js","hooks/useForm.js","selectors/getHeroesByName.js","components/ui/Footer.js","routers/DashboardRoutes.js","routers/AppRouter.js","HeroesApp.js","index.js"],"names":["LoginScreen","history","className","onClick","replace","heroes","HeroCard","id","superhero","publisher","alter_ego","first_appearance","characters","to","src","alt","HeroesList","heroesss","useMemo","includes","Error","filter","hero","getHeroesByPublisher","map","MarvelScreen","Navbar","React","useState","show","setShow","style","marginLeft","type","display","activeClassName","exact","DcScreen","HeroeScreen","heroeId","useParams","find","length","push","goBack","SearchScreen","location","useLocation","queryString","parse","search","q","initialState","values","setValues","target","name","value","useForm","searchText","handledInputChange","heroesFiltered","toLocaleLowerCase","heroName","getHeroesByName","onSubmit","e","preventDefault","placeholder","aria-label","autoComplete","onChange","herOe","Footer","bottom","marginTop","backgroundColor","opacity","href","DashboardRoutes","path","component","AppRouter","HeroesApp","ReactDOM","render","document","getElementById"],"mappings":"+OAEaA,EAAc,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAWzB,OACI,sBAAKC,UAAU,iBAAf,UACI,wCACA,uBAEA,wBACAA,UAAU,kBACVC,QAdQ,WAGhBF,EAAQG,QAAQ,MASR,uB,OClBCC,EAAS,CAClB,CACI,GAAM,YACN,UAAY,SACZ,UAAY,YACZ,UAAY,cACZ,iBAAmB,uBACnB,WAAa,eAEjB,CACI,GAAM,cACN,UAAY,WACZ,UAAY,YACZ,UAAY,SACZ,iBAAmB,mBACnB,WAAa,UAEjB,CACI,GAAM,WACN,UAAY,QACZ,UAAY,YACZ,UAAY,cACZ,iBAAmB,kBACnB,WAAa,oDAEjB,CACI,GAAM,WACN,UAAY,gBACZ,UAAY,YACZ,UAAY,aACZ,iBAAmB,0BACnB,WAAa,6FAEjB,CACI,GAAM,WACN,UAAY,cACZ,UAAY,YACZ,UAAY,eACZ,iBAAmB,sBACnB,WAAa,gBAEjB,CACI,GAAM,YACN,UAAY,eACZ,UAAY,YACZ,UAAY,iBACZ,iBAAmB,qBACnB,WAAa,kBAEjB,CACI,GAAM,aACN,UAAY,oBACZ,UAAY,YACZ,UAAY,eACZ,iBAAmB,wBACnB,WAAa,qBAEjB,CACI,GAAM,WACN,UAAY,kBACZ,UAAY,YACZ,UAAY,eACZ,iBAAmB,uBACnB,WAAa,gBAEjB,CACI,GAAM,UACN,UAAY,cACZ,UAAY,YACZ,UAAY,aACZ,iBAAmB,wBACnB,WAAa,qCAEjB,CACI,GAAM,WACN,UAAY,eACZ,UAAY,YACZ,UAAY,cACZ,iBAAmB,mBACnB,WAAa,4BAEjB,CACI,GAAM,gBACN,UAAY,aACZ,UAAY,gBACZ,UAAY,eACZ,iBAAmB,sBACnB,WAAa,gBAEjB,CACI,GAAM,iBACN,UAAY,kBACZ,UAAY,gBACZ,UAAY,eACZ,iBAAmB,4BACnB,WAAa,gBAEjB,CACI,GAAM,cACN,UAAY,WACZ,UAAY,gBACZ,UAAY,aACZ,iBAAmB,wBACnB,WAAa,cAEjB,CACI,GAAM,cACN,UAAY,OACZ,UAAY,gBACZ,UAAY,eACZ,iBAAmB,0BACnB,WAAa,gBAEjB,CACI,GAAM,cACN,UAAY,OACZ,UAAY,gBACZ,UAAY,eACZ,iBAAmB,yBACnB,WAAa,gBAEjB,CACI,GAAM,mBACN,UAAY,YACZ,UAAY,gBACZ,UAAY,gBACZ,iBAAmB,2BACnB,WAAa,iBAEjB,CACI,GAAM,mBACN,UAAY,YACZ,UAAY,gBACZ,UAAY,0BACZ,iBAAmB,eACnB,WAAa,2BAEjB,CACI,GAAM,iBACN,UAAY,UACZ,UAAY,gBACZ,UAAY,yBACZ,iBAAmB,wBACnB,WAAa,0BAEjB,CACI,GAAM,iBACN,UAAY,UACZ,UAAY,gBACZ,UAAY,gBACZ,iBAAmB,WACnB,WAAa,iBAEjB,CACI,GAAM,gBACN,UAAY,gBACZ,UAAY,gBACZ,UAAY,cACZ,iBAAmB,yBACnB,WAAa,gBC3JRC,G,MAAW,SAAC,GAA2E,IAAzEC,EAAwE,EAAxEA,GAAIC,EAAoE,EAApEA,UAAWC,EAAyD,EAAzDA,UAAWC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,WAG9E,OACI,eAAC,IAAD,CAAMC,GAAE,iBAAYN,GAApB,cAEQ,sBAAKL,UAAU,gBAAf,UACI,qBAAKY,IAAG,0BAAqBP,EAArB,QAA+BL,UAAU,WAAWa,IAAKP,IACjE,qBAAKN,UAAU,eAAf,SAA+BM,IAC/B,qBAAKN,UAAU,mBAAf,SAAmCQ,IACnC,qBAAKR,UAAU,mBAAf,SACI,sBAAKA,UAAU,mBAAf,UAEI,6BAAKO,IACL,uDAAsB,uBAAOE,KAGxBD,IAAcE,GACZ,4BAAIA,iBClB1BI,EAAa,SAAC,GAAiB,IAAhBP,EAAe,EAAfA,UAOlBQ,EAAWC,mBAAQ,kBCTO,SAAET,GAKlC,IAFwB,CAAC,YAAa,iBAElBU,SAAUV,GAG1B,MAAM,IAAIW,MAAJ,qBAAyBX,EAAzB,qBAIV,OAAOJ,EAAOgB,QAAQ,SAAAC,GAAI,OAAIA,EAAKb,YAAcA,KDHlBc,CAAsBd,KAAa,CAACA,IACnE,OAIJ,aAHQ,CAGR,OAAKP,UAAU,YAAf,SACE,qBAAKA,UAAU,6JAAf,SAMUe,EAASO,KAAK,SAAAF,GAAI,OAEd,aAFmB,CAElB,EAAD,eAEQA,GADEA,EAAKf,YErBlBkB,G,MAAe,WAGxB,OACI,gCAGI,qBAAKvB,UAAU,mBAAf,SAEI,qBAAKA,UAAU,+CAAf,SACI,qBAAKY,IAAG,kCAAqCZ,UAAU,iBAK/D,uBAEA,cAAC,EAAD,CAAYO,UAAW,kBAb3B,S,QCNKiB,EAAS,WAElB,MAAsBC,IAAMC,UAAS,GAArC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,sBAAK5B,UAAU,+CAAf,UAEI,cAAC,IAAD,CACIA,UAAU,eACVW,GAAG,IACHkB,MAAO,CAACC,WAAW,IAHvB,0BAQA,wBAAQC,KAAK,SAAS9B,QAAS,kBAAI2B,GAASD,IAAO3B,UAAU,iBAA7D,SACQ,sBAAMA,UAAU,0BAGpB,qBAAKA,UAAU,2BAA2B6B,MAAOF,EAAK,CAACK,QAAQ,SAAS,CAACA,QAAQ,QAAjF,SACI,qBAAIhC,UAAU,qBAAd,UAEA,cAAC,IAAD,CACIiC,gBAAgB,SAChBjC,UAAU,oBACVkC,OAAK,EACLvB,GAAG,UAJP,oBAQA,cAAC,IAAD,CACIsB,gBAAgB,SAChBjC,UAAU,oBACVkC,OAAK,EACLvB,GAAG,MAJP,gBAQA,cAAC,IAAD,CACIsB,gBAAgB,SAChBjC,UAAU,oBACVkC,OAAK,EACLvB,GAAG,UAJP,oBAQA,cAAC,IAAD,CACIsB,gBAAgB,SAChBjC,UAAU,oBACVkC,OAAK,EACLvB,GAAG,SAJP,6BC3CPwB,EAAW,WACpB,OACI,gCAEI,qBAAKnC,UAAU,kBAAf,SACI,qBAAKA,UAAU,2CAAf,SACI,qBAAKY,IAAG,8BAAiCZ,UAAU,iBAQ3D,uBACA,cAAC,EAAD,CAAYO,UAAU,cAb1B,QCDK6B,G,MAAc,SAAC,GAAiB,IAAfrC,EAAc,EAAdA,QAIlBsC,EAAYC,cAAZD,QASFjB,EAAOJ,mBAAQ,kBClBKX,EDkBcgC,ECdjClC,EAAOoC,MAAM,SAAAnB,GAAI,OAAIA,EAAKf,KAAOA,KAJhB,IAAEA,IDkBwB,CAACgC,IAEnD,IAAKjB,EACD,OAAO,cAAC,IAAD,CAAUT,GAAG,MAKxB,IAgBQL,EAAkEc,EAAlEd,UAAWC,EAAuDa,EAAvDb,UAAWC,EAA4CY,EAA5CZ,UAAWC,EAAiCW,EAAjCX,iBAAkBC,EAAeU,EAAfV,WAO3D,OAEI,qBAAKV,UAAU,gCAAf,SAEA,qBAAKA,UAAU,iBAAf,SACI,sBAAKA,UAAU,UAAf,UACI,qBAAKA,UAAU,qDAAf,SACI,qBACIY,IAAG,2BAAsByB,EAAtB,QACHrC,UAAU,oBAIlB,qBAAKA,UAAU,kCAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,iCAAd,SAAgDM,IAChD,qBAAIN,UAAU,yCAAd,UACI,oBAAIA,UAAU,4BAAd,SAA0C,oBAAGA,UAAU,cAAb,UAA2B,4CAA3B,IAAgDQ,OAC1F,oBAAIR,UAAU,4BAAd,SAA0C,oBAAGA,UAAU,cAAb,UAA2B,4CAA3B,IAA+CO,OACzF,oBAAIP,UAAU,4BAAd,SAA0C,oBAAGA,UAAU,cAAb,UAA2B,mDAA3B,IAAsDS,UAEpG,uBACA,sBAAKoB,MAAO,CAAEC,WAAY,IAA1B,UAEI,oBAAI9B,UAAU,cAAd,yBACA,mBAAGA,UAAU,mBAAb,SAAiCU,IACjC,wBACIV,UAAU,qBACVC,QAnDT,WAGZF,EAAQyC,QAAU,EACjBzC,EAAQ0C,KAAK,KAGb1C,EAAQ2C,UA0CQ,mC,yBErEfC,EAAe,SAAC,GAAiB,IAAf5C,EAAc,EAAdA,QAGrB6C,EAAWC,cAQjB,EAAmBC,IAAYC,MAAMH,EAASI,QAAtCC,SAAR,MAAY,GAAZ,EAMA,ECvBmB,WAAwB,IAAvBC,EAAsB,uDAAP,GAGnC,EAA4BxB,mBAASwB,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KAwBA,MAAO,CAAED,EAXkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OAE1BD,EAAU,2BACHD,GADE,kBAEJE,EAAOC,KAAOD,EAAOE,UAZjB,WACTH,EAAWF,KDc4BM,CAAQ,CAE/CC,WAAYR,IAFhB,mBAAOE,EAAP,KAAeO,EAAf,KAUQD,GAVR,KAUuBN,EAAfM,YAQFE,EAAiB3C,mBAAQ,kBEvCJ,WAAc,IAAbsC,EAAY,uDAAP,GAGrC,MAAY,KAATA,EACQ,IAGPA,EAAMA,EAAKM,oBACJzD,EAAOgB,QAAO,SAAA0C,GAAQ,OAAIA,EAASvD,UAAUsD,oBAAoB3C,SAASqC,OF+B5CQ,CAAgBb,KAAI,CAACA,IAc1D,OACI,gCACI,+CACA,uBAEA,qBAAKjD,UAAU,MAAf,SACI,sBAAKA,UAAU,QAAf,UAEI,6CACA,uBAGA,uBAAM+D,SApBD,SAACC,GAClBA,EAAEC,iBAIFlE,EAAQ0C,KAAR,aAAmBgB,KAeuBzD,UAAU,SAAxC,UAEI,uBACI+B,KAAK,SACLmC,YAAY,kBACZlE,UAAU,oBACVmE,aAAW,SACXC,aAAa,MACbd,KAAK,aACLH,OAAQM,EACRY,SAAUX,IAEd,wBACI3B,KAAK,SACL/B,UAAU,wCAFd,+BAgBZ,oBAAIA,UAAU,OAAd,uBACA,uBAGe,KAANiD,GAED,qBAAKjD,UAAU,+BAAf,2BAMO,KAANiD,GAAsC,IAA1BU,EAAenB,QAE5B,sBAAKxC,UAAU,iCAAf,qCAC4B,iCAASiD,OAG7C,qBAAKjD,UAAU,+HAAf,SAKQ2D,EAAerC,KAAI,SAAAgD,GAAK,OAEpB,aAF0B,CAEzB,EAAD,eAGQA,GAFCA,EAAMjE,aGzH1BkE,EAAS,WAClB,OACJ,wBAAQvE,UAAU,iCAAiC6B,MAAO,CAAC2C,OAAO,EAAGC,UAAU,KAA/E,SAEE,sBAAKzE,UAAU,kBAAkB6B,MAAO,CAAC6C,gBAAgB,UAAWC,QAAQ,IAA5E,iCAEE,mBAAG3E,UAAU,kBAAkB4E,KAAK,8CAApC,iCCCSC,EAAkB,WAC3B,OACI,yCAEE,cAAC,EAAD,IAEE,qBAAK7E,UAAU,iBAAf,SACI,eAAC,IAAD,WAEI,cAAC,IAAD,CAAOkC,OAAK,EAAC4C,KAAK,UAAUC,UAAYxD,IAExC,cAAC,IAAD,CAAOW,OAAK,EAAC4C,KAAK,iBAAiBC,UAAY3C,IAC/C,cAAC,IAAD,CAAOF,OAAK,EAAC4C,KAAK,MAAMC,UAAY5C,IACpC,cAAC,IAAD,CAAOD,OAAK,EAAC4C,KAAK,UAAUC,UAAYpC,IAI1C,cAAC,IAAD,CAAUhC,GAAG,iBAKnB,cAAC,EAAD,QClBCqE,EAAY,WACrB,OACI,cAAC,IAAD,UACI,8BAEI,eAAC,IAAD,WAGI,cAAC,IAAD,CAAO9C,OAAK,EAAC4C,KAAK,SAASC,UAAWjF,IAEtC,cAAC,IAAD,CAAOgF,KAAK,IAAIC,UAAWF,YCpBlCI,EAAY,WACrB,OACI,8BACI,cAAC,EAAD,OCDZC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7eb1ea24.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const LoginScreen = ({history}) => { //Este history es una de las propiedades del sistema de rutas LoginScreen, se pueden ver esas propiedades en la pestaña componentes de nuestro navegador web y seleccionamos LoginScreen, para tener acceso a esas propiedades simplemente las extraemos desde los argumentos de LoginScreen utilizando el mismo nombre de la propiedad a utilizar\r\n\r\n//Implementamos el metodo handleLogin\r\n\r\nconst handleLogin = () =>{\r\n    // console.log(\"click\")\r\n    // history.push('/');//En el push agregamos la ruta a la cual queremos navegar. El problema del push() es que si le damos el click al boton \"atras\" del navegador nos devuelve al Login, para que no pase esto y reemplace el Login por otra página agregamos el replace\r\n    history.replace('/'); //Con el replace lo que hace es reemplazar en la historia(history) que no visitó el Login, por lo tan al dar click al boton \"atras\" del navegador NO nos devuelve al Login\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"container mt-5\">\r\n            <h1>Login </h1>\r\n            <hr/>\r\n\r\n            <button\r\n            className=\"btn btn-primary\"\r\n            onClick={handleLogin}\r\n            >\r\n                Enter\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","export const heroes = [\r\n    {\r\n        'id': 'dc-batman',\r\n        'superhero':'Batman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Bruce Wayne',\r\n        'first_appearance':'Detective Comics #27',\r\n        'characters':'Bruce Wayne'\r\n    },\r\n    {\r\n        'id': 'dc-superman',\r\n        'superhero':'Superman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Kal-El',\r\n        'first_appearance':'Action Comics #1',\r\n        'characters':'Kal-El'\r\n    },\r\n    {\r\n        'id': 'dc-flash',\r\n        'superhero':'Flash', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Jay Garrick',\r\n        'first_appearance':'Flash Comics #1',\r\n        'characters':'Jay Garrick, Barry Allen, Wally West, Bart Allen'\r\n    },\r\n    {\r\n        'id': 'dc-green',\r\n        'superhero':'Green Lantern', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Alan Scott',\r\n        'first_appearance':'All-American Comics #16',\r\n        'characters':'Alan Scott, Hal Jordan, Guy Gardner, John Stewart, Kyle Raynor, Jade, Sinestro, Simon Baz'\r\n    },\r\n    {\r\n        'id': 'dc-arrow',\r\n        'superhero':'Green Arrow', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Oliver Queen',\r\n        'first_appearance':'More Fun Comics #73',\r\n        'characters':'Oliver Queen'\r\n    },\r\n    {\r\n        'id': 'dc-wonder',\r\n        'superhero':'Wonder Woman', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Princess Diana',\r\n        'first_appearance':'All Star Comics #8',\r\n        'characters':'Princess Diana'\r\n    },\r\n    {\r\n        'id': 'dc-martian',\r\n        'superhero':'Martian Manhunter', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'J\\'onn J\\'onzz',\r\n        'first_appearance':'Detective Comics #225',\r\n        'characters':'Martian Manhunter'\r\n    },\r\n    {\r\n        'id': 'dc-robin',\r\n        'superhero':'Robin/Nightwing', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dick Grayson',\r\n        'first_appearance':'Detective Comics #38',\r\n        'characters':'Dick Grayson'\r\n    },\r\n    {\r\n        'id': 'dc-blue',\r\n        'superhero':'Blue Beetle', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dan Garret',\r\n        'first_appearance':'Mystery Men Comics #1',\r\n        'characters':'Dan Garret, Ted Kord, Jaime Reyes'\r\n    },\r\n    {\r\n        'id': 'dc-black',\r\n        'superhero':'Black Canary', \r\n        'publisher':'DC Comics', \r\n        'alter_ego':'Dinah Drake',\r\n        'first_appearance':'Flash Comics #86',\r\n        'characters':'Dinah Drake, Dinah Lance'\r\n    },\r\n    {\r\n        'id': 'marvel-spider',\r\n        'superhero':'Spider Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Peter Parker',\r\n        'first_appearance':'Amazing Fantasy #15',\r\n        'characters':'Peter Parker'\r\n    },\r\n    {\r\n        'id': 'marvel-captain',\r\n        'superhero':'Captain America', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Steve Rogers',\r\n        'first_appearance':'Captain America Comics #1',\r\n        'characters':'Steve Rogers'\r\n    },\r\n    {\r\n        'id': 'marvel-iron',\r\n        'superhero':'Iron Man', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Tony Stark',\r\n        'first_appearance':'Tales of Suspense #39',\r\n        'characters':'Tony Stark'\r\n    },\r\n    {\r\n        'id': 'marvel-thor',\r\n        'superhero':'Thor', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Thor Odinson',\r\n        'first_appearance':'Journey into Myster #83',\r\n        'characters':'Thor Odinson'\r\n    },\r\n    {\r\n        'id': 'marvel-hulk',\r\n        'superhero':'Hulk', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Bruce Banner',\r\n        'first_appearance':'The Incredible Hulk #1',\r\n        'characters':'Bruce Banner'\r\n    },\r\n    {\r\n        'id': 'marvel-wolverine',\r\n        'superhero':'Wolverine', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'James Howlett',\r\n        'first_appearance':'The Incredible Hulk #180',\r\n        'characters':'James Howlett'\r\n    },\r\n    {\r\n        'id': 'marvel-daredevil',\r\n        'superhero':'Daredevil', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Matthew Michael Murdock',\r\n        'first_appearance':'Daredevil #1',\r\n        'characters':'Matthew Michael Murdock'\r\n    },\r\n    {\r\n        'id': 'marvel-hawkeye',\r\n        'superhero':'Hawkeye', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Clinton Francis Barton',\r\n        'first_appearance':'Tales of Suspense #57',\r\n        'characters':'Clinton Francis Barton'\r\n    },\r\n    {\r\n        'id': 'marvel-cyclops',\r\n        'superhero':'Cyclops', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Scott Summers',\r\n        'first_appearance':'X-Men #1',\r\n        'characters':'Scott Summers'\r\n    },\r\n    {\r\n        'id': 'marvel-silver',\r\n        'superhero':'Silver Surfer', \r\n        'publisher':'Marvel Comics', \r\n        'alter_ego':'Norrin Radd',\r\n        'first_appearance':'The Fantastic Four #48',\r\n        'characters':'Norrin Radd'\r\n    }\r\n]","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './HeroCard.css'\r\n\r\nexport const HeroCard = ({ id, superhero, publisher, alter_ego, first_appearance, characters }) => {\r\n\r\n\r\n    return (\r\n        <Link to={`./hero/${id}`} > {/*Con este link envia el id a la ruta ./hero */}\r\n \r\n                <div className=\"card my-card \">\r\n                    <img src={`./assets/heroes/${id}.jpg`} className=\"card-img\" alt={superhero} />\r\n                    <div className=\"profile-name\">{superhero}</div>\r\n                    <div className=\"profile-position\">{alter_ego}</div>\r\n                    <div className=\"profile-overview\">\r\n                        <div className=\"profile-overview\">\r\n\r\n                            <h3>{publisher}</h3>\r\n                            <p>Primera aparición: <br />{first_appearance}</p>\r\n                            {\r\n                                // Si los alter_ego son diferentes a los characters entonces que muestre los otros caracteres en párrafos, un personaje puede tener varios characters(nombres)\r\n                                (alter_ego !== characters)\r\n                                && <p>{characters}</p>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n        </Link>\r\n    )\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport { getHeroesByPublisher } from '../../selectors/getHeroesByPublisher';\r\nimport { HeroCard } from './HeroCard';\r\n\r\nexport const HeroesList = ({publisher}) => { //Recibimos el publisher desde DCScreen y MarvelScreen. publisher se en encuentra en nuestro arreglo de heroes y solo tendremos 2 tipos de publisher(DC Comics y Marvel Comics)\r\n    \r\n    // utilizamos nuestro selector\r\n    // Como NO vamos a mutar la información simplemente creamos la constante heroes\r\n    // const heroesss = getHeroesByPublisher( publisher ); // Enviamos el publisher\r\n\r\n    //Creamos nuestra variable memorizada. 178-useMemo. Si el publisher no cambia no tiene porque volver a generar la información, por eso utilizamos el useMemo para memorizar\r\n    const heroesss = useMemo(() => getHeroesByPublisher( publisher ), [publisher]); //Se ejecuta la función solamente si el [publisher] cambia \r\n    return (\r\n        //Quitamos la etiqueta <ul/> y añadimos el </div> para trabajar con las cards de Boostrap\r\n        \r\n        //    <div className=\"row row-cols-md-3  \">\r\n<div className=\"container\">\r\n  <div className=\"row row-cols-auto row-cols-lg-3 g-auto g-lg-3 row-cols-xl-4 g-xl-auto row-cols-xs-2 g-xs-2 animate__animated animate__fadeIn d-flex justify-content-center\">\r\n    \r\n\r\n            {/*Ahora barremos cada uno de los elementos para mostrarlos en pantalla */}\r\n        {//Estos {} es para utilizar la expresión de JS\r\n\r\n            heroesss.map( hero =>( //Este () es para retornar un objeto\r\n            // Cambiamos el <li/> por <HeroCard/>\r\n                <HeroCard \r\n                    key={ hero.id }\r\n                    {...hero} /*Enviamos el operador express a HeroCard para extraer cada una de las propiedades de hero */\r\n                />\r\n            \r\n            ))\r\n        }\r\n\r\n\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n","import { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroesByPublisher = ( publisher ) => { //Recibimos el publisher desde HeroesList\r\n\r\n    // Creamos una validación por si se escribe un tipo de publisher que no existe entonces dé un error\r\n    const validPublishers = ['DC Comics', 'Marvel Comics']; // Si envía cualquier cosa que NO esté dentro de este arreglo entonces que envíe un error\r\n\r\n    if(!validPublishers.includes( publisher )){ //Barremos el valiPublishers y debe incluir el pusblisher que estamos enviando por argumento\r\n    \r\n        // Si encuentra el publisher entonces devuelve un true y si no ejecuta el error\r\n        throw new Error(`Publisher \"${ publisher}\" no es correcto`);\r\n\r\n    }\r\n    //Hace el filtrado del arreglo y nos devuelve el hero siempre y cuando hero.publisher sea igual al publisher que recibimos por argumento\r\n    return heroes.filter( hero => hero.publisher === publisher)//Caso contrario filtramos el arreglo\r\n}","import React from 'react'\r\n// import { heroes } from '../../data/heroes'\r\nimport { HeroesList } from '../heroes/HeroesList'\r\nimport '../marvel/Marvel-DC.css'\r\n\r\nexport const MarvelScreen = () => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <h1>Marvel Screen</h1> */}\r\n\r\n            <div className=\"contenedorPadre \">\r\n\r\n                <div className=\"marvel-logo animate__animated animate__pulse\">\r\n                    <img src={`./assets/heroes/marvel-logo.png`} className=\"card-img\" />\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <hr />\r\n\r\n            <HeroesList publisher={'Marvel Comics'} /> {/*Esto es lo que le enviamos al publisher */}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nexport const Navbar = () => {\r\n\r\n    const [show, setShow]=React.useState(false);\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-dark bg-dark navbar-expand-md \">\r\n            \r\n            <Link \r\n                className=\"navbar-brand\" \r\n                to=\"/\"\r\n                style={{marginLeft:15}}\r\n            >\r\n                Asociaciones\r\n            </Link>\r\n\r\n            <button type=\"button\" onClick={()=>setShow(!show)} className=\"navbar-toggler\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n               \r\n                <div className=\"collapse navbar-collapse\" style={show?{display:\"block\"}:{display:'none'}}>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/marvel\"\r\n                    >\r\n                        Marvel\r\n                    </NavLink>\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/dc\"\r\n                    >\r\n                        DC\r\n                    </NavLink>\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/search\"\r\n                    >\r\n                        Search\r\n                    </NavLink>\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/login\"\r\n                    >\r\n                        Logout\r\n                    </NavLink>\r\n                    </ul>\r\n                    </div>\r\n\r\n            \r\n        </nav>\r\n    )\r\n}","import React from 'react'\r\n// import { heroes } from '../../data/heroes'\r\nimport { HeroesList } from '../heroes/HeroesList'\r\nimport '../marvel/Marvel-DC.css'\r\n\r\n\r\nexport const DcScreen = () => {\r\n    return (\r\n        <div>\r\n            {/* <h1 className=\"text-center fw-bold display-4\" style={{backgroundColor:\"rgb(12, 124, 236)\", color:\"white\"}}>DC Screen</h1> */}\r\n            <div className=\"contenedorPadre\">\r\n                <div className=\"dc-logo animate__animated animate__pulse\">\r\n                    <img src={`./assets/heroes/DC-logo.png`} className=\"card-img\" />\r\n                    {/* <h1 className=\"titulo display-1 fw-bold\" >DC Comics</h1> */}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            {/* <div className=\"reset\"></div> */}\r\n\r\n            <hr />\r\n            <HeroesList publisher=\"DC Comics\" /> {/* Envia los publisher como un string si no agrego la expresión de JS {}, ver ejemplo en el MarvelScreen lo hice de la otra forma, cualquier de las dos formas es correcta */}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useMemo } from 'react'\r\nimport { Redirect, useHistory, useParams } from 'react-router'\r\nimport { getHeroeById } from '../../selectors/getHeroeById';\r\nimport './HeroeScreen.css';\r\n\r\n//Necesitamos extraer los id enviados el componente HeroeCard.js por el URL\r\n//Con este CustomHook extraeremos los parametros que vayan por el URL\r\nexport const HeroeScreen = ({ history }) => { //Esta propiedad la extraemos de HeroScreen, ir a la pestaña componets desde el navegador y al final HeroeScreen. utilizaremos el history para devolvernos a la página anterior\r\n    //----------------------------------------------------------------------------------------------------------------   \r\n    // const params=useParams();\r\n    // console.log(params);// {heroeId: \"marvel-spider\"} //Devuelve un objeto\r\n    const { heroeId } = useParams();\r\n    // console.log(heroeId);\r\n\r\n    //----------------------------------------------------------------------------------------------------------------   \r\n    //Necesitamos toda la información del Heroe. Hacemos uso del selector getHeroeById\r\n    // const hero = getHeroeById(heroeId);\r\n    // console.log(hero);\r\n\r\n    //useMemo. Si el heroeId no cambia no tiene porque volver a generar o ejecutar este codigo\r\n    const hero = useMemo(() => getHeroeById(heroeId), [heroeId]);\r\n\r\n    if (!hero) { //Si hero no existe \"undefined\" entonces obligatoriamente tiene que retornar algo, en este caso retorna el componente <Redirect to=\"/\"/> para que redireccione a la pagina de Marvel\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    // const { replace } = useHistory(); //Esto se utiliza en la linea 41\r\n\r\n    const handleBack = () => { //Necesitaremos la propiedad history -> goBack\r\n\r\n        //Primera forma de hacer que vuelva a la pagina anterior cuando estamos navegando en incognito, pero la mejor manera de hacerlo es utilizando el customHook de history ,ver en la segunda forma \r\n        if(history.length <= 2){ //Si la longitud del historial es menor a 2, osea, es 1 entonces redirige a marvel\r\n            history.push('/');\r\n        } else{\r\n\r\n            history.goBack(); //Devolverse a la pagina anterior\r\n        }\r\n        //-----------------------------------------------------------------------------------------------\r\n\r\n        //Segunda forma utilizando el useHistory\r\n        // replace(`/${publisher === \"DC Comics\" ? \"dc\" : \"marvel\"}`); //Si el publisher fuera igual a DC Comics vaya a la ruta dc de lo contrario publisher es igual a Marvel Comics por lo tanto va a la ruta marvel, tendriamos que cambiarlo si tuvieramos más de 2 publisher, tal ves con un switch(me permite tener varios casos). OJO: si utilizo el history.replace tendría que poner la barra al frente de dc y marver, ejemplo: /dc y /marvel \r\n    }\r\n\r\n    //Desestructuramos el objeto, quitamos el \"id\" porque el id es heroeId. Tenemos un proble y es que si escribimos cualquier cosa en el url que no sea un id nos dará undefine y por ende un error y tenemos que manejar eso \r\n    const { superhero, publisher, alter_ego, first_appearance, characters } = hero;\r\n\r\n    //usehistory\r\n    //-----------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"d-flex justify-content-center\">\r\n\r\n        <div className=\"card mb-3 mt-5\" >\r\n            <div className=\"row g-0\">\r\n                <div className=\"col-md-4 col-md-auto col-sm-12  img-card animacion\">\r\n                    <img\r\n                        src={`../assets/heroes/${heroeId}.jpg`}\r\n                        className=\"img-thumbnail\"\r\n                        \r\n                        />\r\n                </div>\r\n                <div className=\"col-md-8 col-md-auto col-sm-12 \">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title display-3 mb-4 ms-4\">{superhero}</h5>\r\n                        <ul className=\"card-text list- group list-group-flush\">\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> Alter ego:</b > {alter_ego}</p></li>\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> Publisher:</b> {publisher}</p></li>\r\n                            <li className=\"card-text list-group-item\"><p className=\"mov-izq-der\"><b> First appearance:</b> {first_appearance}</p></li>\r\n                        </ul>\r\n                        <br />\r\n                        <div style={{ marginLeft: 47 }}>\r\n\r\n                            <h5 className=\"mov-izq-der\"  > Characters</h5>\r\n                            <p className=\"mb-5 mov-izq-der\">{characters}</p>\r\n                            <button\r\n                                className=\"btn-lg mov-izq-der\"\r\n                                onClick={handleBack}\r\n                                >\r\n                                Back\r\n                </button>\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                                    </div>\r\n        // <div className=\"row mt-5\">\r\n        //     <div className=\"col-3\" style={{border:\"dotted\",borderColor:\"red\"}}>\r\n        //         <img \r\n        //             src={`../assets/heroes/${ heroeId }.jpg`}\r\n        //             className=\"img-thumbnail\"\r\n        //         />\r\n        //     </div>\r\n        \r\n        //     <div className=\"col-7\">\r\n        //         <h3> {superhero}</h3>\r\n        //         <ul className=\"list- group list-group-flush\">\r\n        //             <li className=\"list-group-item\"><b> Alter ego:</b> {alter_ego}</li>\r\n        //             <li className=\"list-group-item\"><b> Publisher:</b> {publisher}</li>\r\n        //             <li className=\"list-group-item\"><b> First appearance:</b> {first_appearance}</li>\r\n        //         </ul>\r\n        \r\n        //         <h5> Characters</h5>\r\n        //         <p>{characters}</p>\r\n        \r\n        //         <button \r\n        //         className=\"btn btn-outline-info\"\r\n        //         onClick={handleBack}\r\n        //         >\r\n        //             Back\r\n        //         </button>\r\n        //     </div>\r\n        \r\n        // </div>\r\n        )\r\n    }\r\n    ","import { heroes } from \"../data/heroes\";\r\n\r\nexport const getHeroeById = ( id ) => { //Recibimos el id //Este es el id que escribimos\r\n\r\n\r\n   //Ponemos el find, eso quiere decir que apenas encuentre uno eso sería todo\r\n    return heroes.find( hero => hero.id === id)//Caso contrario filtramos el arreglo\r\n}","import React, { useMemo } from 'react';\r\nimport queryString from 'query-string';\r\nimport { useLocation } from 'react-router';\r\nimport { heroes } from '../../data/heroes'\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { HeroCard } from '../heroes/HeroCard';\r\nimport { getHeroesByName } from '../../selectors/getHeroesByName';\r\n\r\nexport const SearchScreen = ({ history }) => {//1.QueryString. Hacemos el history para poder hacer un push()\r\n\r\n    //3.QueryString. Utilizamos el hook para extraer la \"location \"de searchScreen, esta \"location\" se pudo hacer igual al history, pero, es solo para ver el ejemplo utilizando el customHook\r\n    const location = useLocation();\r\n    // console.log(location); //location.search para imprimir la propiedad search de la location\r\n    //4.QueryString. Uso de npm query-string\r\n    // console.log(location.search);\r\n    // console.log(queryString);\r\n    //Pasamos nuestro objeto location.search a queryString\r\n    // console.log(queryString.parse(location.search));\r\n    //5.QueryString. Desestructuramos para extraer solo el query que nos interesa el cual es solo uno en este caso solo utilizaremos el query \"q\"\r\n    const { q = '' } = queryString.parse(location.search);//Inicializamos el query en como string vacío para que no sea undefined en caso de que no tenga un valor\r\n    // console.log(q); //Imprime batman\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Uso del customHook useForm\r\n    const [values, handledInputChange,reset] = useForm({ //Primero necesitamos el name del input\r\n        // searchText:''. Lo incializamos como un string vacío\r\n        searchText: q // 6.QueryString. Agregamos como valor inicial de nuestro searchText el query(q), de esta forma si se realiza un refresh de nuestra pagina, se mantendrá como valor incicial el \"q\", por lo tanto muestra el superheroe que se encuentra en el query\r\n    });\r\n\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Segundo paso, extraemos el searchText de nuestro values. Hacemos la desestructuracion.\r\n    //Utilizamos el searchText que extraimos desde values para usarlo en el form(en values=\"searchText\")\r\n    const { searchText } = values;\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    //Creamos una costante para almacenar los heroes y luego realizar el map()\r\n    // const heroesFiltered = heroes;\r\n    //Utilizamos la función para obtener los heroes filtrados. Video 182\r\n    // Utilizamos el useMemo porque cada vez que digitamos una tecla del teclado vuelve a ejecutar esta función, entonces, ahora solo se ejecuta cuando cambie el query(q)\r\n    // const heroesFiltered = useMemo(() => getHeroesByName( searchText ), [q]); //El searchText representa al \"name\" en el archivo getHeroesByName\r\n    const heroesFiltered = useMemo(() => getHeroesByName(q), [q]); //Si lo agrego como la linea de arriba, la linea 42 va a funcionar, pero, muestra una advertencia \"React useMemo has a missing dependency\": 'searchText'\", eso quiere decir que useMemo tiene una dependencia faltante debido a que searchText tendría que estar como dependencia en lugar de la \"q\" \r\n    //Tambien gracias al useMemo si le damos click a un personaje y luego le damos en el boton \"Back\" me muestra la busqueda tal y como se realizó la última vez, ya que, estamos trabajando en base al Query String y la funcíon getHeroesByName no se está disparando gracias al useMemo porque tenemos memorizados esos valores\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n    \r\n    const handleSearch = (e) => {\r\n        e.preventDefault();//Para que NO haga el refresh de la pagina\r\n        // console.log(searchText);//Imprimimos lo que sea que la persona escriba y damos a la tecla \"Enter\"\r\n\r\n        //2.Query String. Cuando la persona ingresa al texto(el que imprimimos en consola(searchText)), hacemos el push()\r\n        history.push(`?q=${searchText}`);//Añadimos una \"?q\" de query(se puede agregar otra cosa en lugar de la \"q\") y luego agregamos el texto que buscamos(serachText);\r\n        \r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Search Screen</h1>\r\n            <hr />\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n\r\n                    <h4>Search form</h4>\r\n                    <hr />\r\n\r\n\r\n                    <form onSubmit={handleSearch} className=\"d-flex\">\r\n\r\n                        <input\r\n                            type=\"search\"\r\n                            placeholder=\"Find your heroe\"\r\n                            className=\"form-control me-2\"\r\n                            aria-label=\"Search\"\r\n                            autoComplete=\"off\"\r\n                            name=\"searchText\"\r\n                            values={searchText}\r\n                            onChange={handledInputChange}\r\n                        />\r\n                        <button\r\n                            type=\"submit\" /*Esto es para cuando le demos click al boton o teclemos Enter entonces que haga el posteo */\r\n                            className=\"btn m-1 btn-block btn-outline-primary\"\r\n                        >\r\n                            Search...\r\n                    </button>\r\n                    </form>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n            {/* Aquí colocamos el resultado de un arreglo */}\r\n\r\n            <h4 className=\"mt-4\"> Results </h4>\r\n            <hr />\r\n\r\n                {\r\n                    (q === '') \r\n                    &&\r\n                    <div className=\"text-center alert alert-info\">\r\n                        Search a hero\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    (q !== '' && heroesFiltered.length === 0) //Si el query es distinto de vacío y si la longitud del heroesFiltered es 0 entonces haga lo siguiente: \r\n                    &&\r\n                    <div className=\"text-center alert alert-danger\">\r\n                        There is no a hero with <strong>{q}</strong> \r\n                    </div>\r\n                }\r\n            <div className=\"row row-cols-auto row-cols-lg-3 g-auto g-lg-3 row-cols-xl-4 g-xl-auto row-cols-xs-2 g-xs-2 animate__animated animate__fadeIn\">\r\n                \r\n                \r\n                {/* Colocamos la expression de JS */}\r\n                {\r\n                    heroesFiltered.map(herOe => ( //El parentesis ver es porque retorna un objeto\r\n\r\n                        <HeroCard\r\n                            key={herOe.id}\r\n                            //Eviamos todas las propiedades del heroe\r\n                            {...herOe}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\n\r\nexport const useForm = (initialState = {}) => {\r\n\r\n   \r\n    const [values, setValues] = useState(initialState);\r\n\r\n     //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    // *** Función para limpiar los inputs después de escribir algo ***\r\n    const reset= () =>{\r\n        setValues( initialState );\r\n    }\r\n\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    // *** Función handledInputChange ***\r\n    //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n    const handledInputChange = ({ target }) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value //se entiende que el value que tiene el input, que llega por medio del evento, asignaselo a la propiedad del state que tenga ese nombre hasta ahí se entiende bien\r\n        });\r\n\r\n    }\r\n     //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------- \r\n\r\n    \r\n    return [ values, handledInputChange, reset ]; //Puedo retornar un arreglo u objeto, en este caso retornaremos un arreglo\r\n}\r\n","import { heroes } from '../data/heroes';\r\nimport { useForm } from '../hooks/useForm';\r\n\r\n\r\nexport const getHeroesByName = (name='') => { //Recibe lo que se escribe en el input del componente SarchScreen.js. Lo inicializamos como un string vacio para que regrese todos\r\n\r\n//Condicional si no recibe un string\r\nif(name === ''){ //Si el name es igual a un string vacío, esto es porque si no hemos escrito nada, puede que estemos en la pantalla inicial y no queremos revisar ningun elemento, pero en el momento que el name tenga un valor aplica el filter(filtro)\r\n    return [];\r\n}\r\n\r\n    name= name.toLocaleLowerCase();//toLocaleLowerCase para pasarlo a minuscula\r\n    return heroes.filter(heroName => heroName.superhero.toLocaleLowerCase().includes(name))//El includes es para que el name que está recibiendo como argumento lo va a regresar. \r\n    //El filter practicamente me permite buscar cada super heroe por el nombre, si agrego una \"b\" entonces van apareciendo super heroes que empiecen con esa letra, el include es para \r\n    //que devuelva solo 1 personaje y no todos. El name es el pasó de ser \"searchText\" a \"q\" en el archivo SearchScreen, es lo que escribimos en la caja de texto\r\n}\r\n","import React from 'react'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n<footer className=\"bg-dark text-center text-white\" style={{bottom:0, marginTop:233}}>\r\n\r\n  <div className=\"text-center p-3\" style={{backgroundColor:\"#000000\", opacity:0.2}}>\r\n    © 2021 Copyright:\r\n    <a className=\"text-white ms-1\" href=\"https://www.youtube.com/watch?v=LXb3EKWsInQ\"> Alejandro CM</a>\r\n  </div>\r\n</footer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route, Switch } from 'react-router'\r\nimport { DcScreen } from '../components/dc/DcScreen'\r\nimport { HeroeScreen } from '../components/heroes/HeroeScreen'\r\nimport { MarvelScreen } from '../components/marvel/MarvelScreen'\r\nimport { SearchScreen } from '../components/search/SearchScreen'\r\nimport { Footer } from '../components/ui/Footer'\r\nimport { Navbar } from '../components/ui/Navbar'\r\n\r\nexport const DashboardRoutes = () => {\r\n    return (\r\n        <> {/*Este fragment se agrega porque hay más de un elemento html, hay un <Navbar/> y el <div/> */}\r\n         \r\n          <Navbar/>\r\n          \r\n            <div className=\"container mt-2\">\r\n                <Switch>\r\n  \r\n                    <Route exact path=\"/marvel\" component={ MarvelScreen } />\r\n                    {/* Este componente va a recibir un argumento por el url \":heroeId\" */}\r\n                    <Route exact path=\"/hero/:heroeId\" component={ HeroeScreen } />\r\n                    <Route exact path=\"/dc\" component={ DcScreen } />\r\n                    <Route exact path=\"/search\" component={ SearchScreen } />\r\n\r\n                    {/* Si no nos encontramos en alguna de la rutas anteriores(marvel,heroe/:heroeID o dc) entonces nos redireccione a path de marvel */}\r\n                 {/*El Redirect también se puede utilizar para validaciones, por ejemplo, si algo no viene entonces que llame al Redirect  */}\r\n                  <Redirect to=\"/marvel\"/>\r\n                 \r\n                </Switch>  \r\n            </div>  \r\n\r\n            <Footer/>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n\r\n} from \"react-router-dom\";\r\nimport { LoginScreen } from \"../components/login/LoginScreen\";\r\nimport { MarvelScreen } from \"../components/marvel/MarvelScreen\";\r\n\r\nimport { Navbar } from \"../components/ui/Navbar\";\r\nimport { DashboardRoutes } from \"./DashboardRoutes\";\r\n\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router>\r\n            <div>\r\n\r\n                <Switch>\r\n\r\n                    {/* exact para que la ruta siempre sea exacta */}\r\n                    <Route exact path=\"/login\" component={LoginScreen} />\r\n                    {/*No se agreg el exact porque se presentan inconvenientes */}\r\n                    <Route path=\"/\" component={DashboardRoutes} />\r\n               \r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { AppRouter } from './routers/AppRouter'\r\n\r\nexport const HeroesApp = () => {\r\n    return (\r\n        <div>\r\n            <AppRouter />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HeroesApp } from './HeroesApp';\n\n\nReactDOM.render(\n\n    <HeroesApp />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}